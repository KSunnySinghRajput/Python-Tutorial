import json
a=json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
print(json.dumps("\"foo\bar"))
print(json.dumps('\u1234'))
print(json.dumps('\\'))
print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))     #{"a": 0, "b": 0, "c": 0}

from io import StringIO
io = StringIO()
json.dump(['streaming API'], io)
print(io.getvalue())


#Compact encoding::
from collections import OrderedDict
mydict = OrderedDict([('4', 5), ('6', 7)])
print(json.dumps([1,2,3,mydict], separators=(',', ':')))


#Pretty printing::
print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=7))

#Decoding JSON::
obj = ['foo', {'bar': ['baz', None, 1.0, 2]}]
print(json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]') == obj)         #True
print(json.loads('"\\"foo\\bar"') == '"foo\x08ar')             #True

from io import StringIO
io = StringIO('["streaming API"]')
print(json.load(io)[0] == 'streaming API')     #True


#Specializing JSON object encoding::
 
def encode_complex(obj):
         if isinstance(obj, complex):
             return [obj.real, obj.imag]
         raise TypeError(repr(o) + " is not JSON serializable")
    
print(json.dumps(2 + 1j, default=encode_complex))
    #'[2.0, 1.0]'
print(json.JSONEncoder(default=encode_complex).encode(2 + 1j))
    #'[2.0, 1.0]'
print(''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j)))
    #'[2.0, 1.0]'