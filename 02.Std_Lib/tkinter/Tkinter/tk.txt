
'''
Actions are bound to events by resources (e.g. keyword argument
command) or with the method
bind.
bind(self, sequence=None, func=None, add=None)
Bind to this widget at event SEQUENCE a call to function FUNC.
 
            SEQUENCE is a string of concatenated event
            patterns. An event pattern is of the form
            <MODIFIER-MODIFIER-TYPE-DETAIL>
            where MODIFIER is one of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
            Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
            B3, Alt, Button4, B4, Double, Button5, B5 Triple,
            Mod1, M1.

            TYPE is one of Activate, Enter, Map,
            ButtonPress, Button, Expose, Motion, ButtonRelease
            FocusIn, MouseWheel, Circulate, FocusOut, Property,
            Colormap, Gravity Reparent, Configure, KeyPress, Key,
            Unmap, Deactivate, KeyRelease Visibility, Destroy,
            Leave and DETAIL is the button number for ButtonPress,
            ButtonRelease and DETAIL is the Keysym for KeyPress and
            KeyRelease.

            Examples are
            <Control-Button-1> for pressing Control and mouse button 1 or
            <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
            An event pattern can also be a virtual event of the form
            <<AString>> where AString can be arbitrary. This
            event can be generated by event_generate.
'''
from tkinter import *
from tkinter import ttk
root = Tk()
l =ttk.Label(root, text="Starting...")
l.grid()
l.bind('<Enter>', lambda e: l.configure(text='Moved mouse inside'))
l.bind('<Leave>', lambda e: l.configure(text='Moved mouse outside'))
l.bind('<1>', lambda e: l.configure(text='Clicked left mouse button'))
l.bind('<Double-1>', lambda e: l.configure(text='Double clicked'))
l.bind('<B3-Motion>', lambda e: l.configure(text='right button drag to %d,%d' % (e.x, e.y)))
root.mainloop()
from tkinter import *  
#frame(top)
top = Tk()                   #create object 
top.geometry("720x480")      #SIZE Frame
'''
Wrapper functions for Tcl/Tk.
 
Tkinter provides classes which allow the display, positioning and
control of widgets.
Toplevel widgets are Tk and Toplevel.
Other
widgets are:-
        #Frame( Valid resource names: background, bd, bg, borderwidth, class,
                colormap, container, cursor, height, highlightbackground,
                highlightcolor, highlightthickness, relief, takefocus, visual, width.)
        #Label(Construct a label widget with the parent MASTER.
 
                STANDARD OPTIONS
                 
                    activebackground, activeforeground, anchor,
                    background, bitmap, borderwidth, cursor,
                    disabledforeground, font, foreground,
                    highlightbackground, highlightcolor,
                    highlightthickness, image, justify,
                    padx, pady, relief, takefocus, text,
                    textvariable, underline, wraplength
                 
                WIDGET-SPECIFIC OPTIONS
                 
                    height, state, width),
                    
        #Entry(Construct an entry widget with the parent MASTER.
    
                    Valid resource names: background, bd, bg, borderwidth, cursor,
                    exportselection, fg, font, foreground, highlightbackground,
                    highlightcolor, highlightthickness, insertbackground,
                    insertborderwidth, insertofftime, insertontime, insertwidth,
                    invalidcommand, invcmd, justify, relief, selectbackground,
                    selectborderwidth, selectforeground, show, state, takefocus,
                    textvariable, validate, validatecommand, vcmd, width,
                    xscrollcommand.)
                    
        #Text(STANDARD OPTIONS
     
                    background, borderwidth, cursor,
                    exportselection, font, foreground,
                    highlightbackground, highlightcolor,
                    highlightthickness, insertbackground,
                    insertborderwidth, insertofftime,
                    insertontime, insertwidth, padx, pady,
                    relief, selectbackground,
                    selectborderwidth, selectforeground,
                    setgrid, takefocus,
                    xscrollcommand, yscrollcommand,
             
            WIDGET-SPECIFIC OPTIONS
                 
                    autoseparators, height, maxundo,
                    spacing1, spacing2, spacing3,
                    state, tabs, undo, width, wrap,),
                    
        #Canvas(Construct a canvas widget with the parent MASTER. 
                    Valid resource names:
                    background, bd, bg, borderwidth, closeenough,
                    confine, cursor, height, highlightbackground, highlightcolor,
                    highlightthickness, insertbackground, insertborderwidth,
                    insertofftime, insertontime, insertwidth, offset, relief,
                    scrollregion, selectbackground, selectborderwidth, selectforeground,
                    state, takefocus, width, xscrollcommand, xscrollincrement,
                    yscrollcommand, yscrollincrement.),
                    
        #Button(Construct a button widget with the parent MASTER.
 
                STANDARD OPTIONS
                 
                    activebackground, activeforeground, anchor,
                    background, bitmap, borderwidth, cursor,
                    disabledforeground, font, foreground
                    highlightbackground, highlightcolor,
                    highlightthickness, image, justify,
                    padx, pady, relief, repeatdelay,
                    repeatinterval, takefocus, text,
                    textvariable, underline, wraplength
                 
                WIDGET-SPECIFIC OPTIONS
                 
                    command, compound, default, height,
                    overrelief, state, width)
                
        Radiobutton(Construct a radiobutton widget with the parent MASTER.
 
                    Valid resource names: activebackground, activeforeground, anchor,
                    background, bd, bg, bitmap, borderwidth, command, cursor,
                    disabledforeground, fg, font, foreground, height,
                    highlightbackground, highlightcolor, highlightthickness, image,
                    indicatoron, justify, padx, pady, relief, selectcolor, selectimage,
                    state, takefocus, text, textvariable, underline, value, variable,
                    width, wraplength.),
                    
        Checkbutton(Valid resource names: activebackground, activeforeground, anchor,
                    background, bd, bg, bitmap, borderwidth, command, cursor,
                    disabledforeground, fg, font, foreground, height,
                    highlightbackground, highlightcolor, highlightthickness, image,
                    indicatoron, justify, offvalue, onvalue, padx, pady, relief,
                    selectcolor, selectimage, state, takefocus, text, textvariable,
                    underline, variable, width, wraplength.),
        #Scale,
        Listbox,
        Scrollbar,
        OptionMenu,
        Spinbox(STANDARD OPTIONS
                 
                    activebackground, background, borderwidth,
                    cursor, exportselection, font, foreground,
                    highlightbackground, highlightcolor,
                    highlightthickness, insertbackground,
                    insertborderwidth, insertofftime,
                    insertontime, insertwidth, justify, relief,
                    repeatdelay, repeatinterval,
                    selectbackground, selectborderwidth
                    selectforeground, takefocus, textvariable
                    xscrollcommand.
                 
                WIDGET-SPECIFIC OPTIONS
                 
                    buttonbackground, buttoncursor,
                    buttondownrelief, buttonuprelief,
                    command, disabledbackground,
                    disabledforeground, format, from,
                    invalidcommand, increment,
                    readonlybackground, state, to,
                    validate, validatecommand values,
                    width, wrap,)
    
        LabelFrame(STANDARD OPTIONS
 
                        borderwidth, cursor, font, foreground,
                        highlightbackground, highlightcolor,
                        highlightthickness, padx, pady, relief,
                        takefocus, text
                     
                    WIDGET-SPECIFIC OPTIONS
                     
                        background, class, colormap, container,
                        height, labelanchor, labelwidget,
                        visual, width)
            and
            
        PanedWindow(STANDARD OPTIONS
 
                        background, borderwidth, cursor, height,
                        orient, relief, width
                     
                    WIDGET-SPECIFIC OPTIONS
                     
                        handlepad, handlesize, opaqueresize,
                        sashcursor, sashpad, sashrelief,
                        sashwidth, showhandle,).
                     
Properties of the widgets are specified with keyword arguments.
Keyword arguments have the same name as the corresponding resource
under Tk.
 
Widgets are positioned with one of the geometry managers :-
    <object>.place(arg):- OR <object>.configure
        arg:-
            Place a widget in the parent widget. Use as options:
                in=master - master relative to which the widget is placed
                in_=master - see 'in' option description
                x=amount - locate anchor of this widget at position x of master
                y=amount - locate anchor of this widget at position y of master
                relx=amount - locate anchor of this widget between 0.0 and 1.0 ; relative to width of master (1.0 is right edge)
                rely=amount - locate anchor of this widget between 0.0 and 1.0 ;relative to height of master (1.0 is bottom edge)
                anchor=NSEW (or subset) - position anchor according to given direction
                width=amount - width of this widget in pixel
                height=amount - height of this widget in pixel
                relwidth=amount - width of this widget between 0.0 and 1.0
                                  relative to width of master (1.0 is the same width
                                  as the master)
                relheight=amount - height of this widget between 0.0 and 1.0 relative to height of master (1.0 is the same height as the master)
                bordermode="inside" or "outside" - whether to take border width of master widget into account


    
    Pack:-
            pack_configure(self, cnf={}, **kw)
                Pack a widget in the parent widget. Use as options:
                after=widget - pack it after you have packed widget
                anchor=NSEW (or subset) - position widget according to
                                          given direction
                before=widget - pack it before you will pack widget
                expand=bool - expand widget if parent size grows
                fill=NONE or X or Y or BOTH - fill widget if widget grows
                in=master - use master to contain this widget
                in_=master - see 'in' option description
                ipadx=amount - add internal padding in x direction
                ipady=amount - add internal padding in y direction
                padx=amount - add padding in x direction
                pady=amount - add padding in y direction
                side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
    or Grid.
            grid = grid_configure(self, cnf={}, **kw)
                Position a widget in the parent widget in a grid. Use as options:
                column=number - use cell identified with given column (starting with 0)
                columnspan=number - this widget will span several columns
                in=master - use master to contain this widget
                in_=master - see 'in' option description
                ipadx=amount - add internal padding in x direction
                ipady=amount - add internal padding in y direction
                padx=amount - add padding in x direction
                pady=amount - add padding in y direction
                row=number - use cell identified with given row (starting with 0)
                rowspan=number - this widget will span several rows
                sticky=NSEW - if cell is larger on which sides will this
                              widget stick to the cell boundary
These managers can be called with methods place, pack, grid
available in every Widget.
 
Actions are bound to events by resources (e.g. keyword argument
command) or with the method
bind.
bind(self, sequence=None, func=None, add=None)
Bind to this widget at event SEQUENCE a call to function FUNC.
 
            SEQUENCE is a string of concatenated event
            patterns. An event pattern is of the form
            <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
            of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
            Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
            B3, Alt, Button4, B4, Double, Button5, B5 Triple,
            Mod1, M1. TYPE is one of Activate, Enter, Map,
            ButtonPress, Button, Expose, Motion, ButtonRelease
            FocusIn, MouseWheel, Circulate, FocusOut, Property,
            Colormap, Gravity Reparent, Configure, KeyPress, Key,
            Unmap, Deactivate, KeyRelease Visibility, Destroy,
            Leave and DETAIL is the button number for ButtonPress,
            ButtonRelease and DETAIL is the Keysym for KeyPress and
            KeyRelease. Examples are
            <Control-Button-1> for pressing Control and mouse button 1 or
            <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
            An event pattern can also be a virtual event of the form
            <<AString>> where AString can be arbitrary. This
            event can be generated by event_generate.
'''






photo = PhotoImage(file='01.png')
top.state('zoomed')
top.title("First Frame")     #Title Name In Upper Title bar
#BgColor="orange"
#top.configure(bg=BgColor)
#top.iconbitmap(r'C:\Users\KunwarSunnySingh\Desktop\ProjectPython\Tkinter\Fb.icon')
'''
photo = PhotoImage(file='01.png')
labelphoto =Label(top,image=photo)
labelphoto.pack()

#label
text = Label(top,text='------Fill Detail-----')
text.pack() #pack Label In Frame


#command button
def sunny():
    print("hello")
#button
btn= Button(top,text="print",command=sunny)
btn.pack()

#Scale
def ScalPrint(val):
    print(val)   #val is Str
scal =Scale(top,from_=1,to=6,orient=HORIZONTAL,command=ScalPrint)
scal.set(4)
scal.pack()
'''
canvas = Canvas(top)
canvas.create_line(10, 10, 200, 50)
canvas.place(x=580,y=10)
"""
menubutton = Menubutton(top, text = "Language", relief = FLAT)  

menubutton.menu = Menu(menubutton)  
menubutton["menu"]=menubutton.menu  
menubutton.menu.add_checkbutton(label = "Hindi", variable=IntVar())  
menubutton.menu.add_checkbutton(label = "English", variable = IntVar())  
menubutton.pack()
"""
top.mainloop()
